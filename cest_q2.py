# -*- coding: utf-8 -*-
"""CEST_Q2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1owLjR5-GoYqSTtNdyjCgc40Mz8XdDPh7
"""

import numpy as np
import scipy as sp
import matplotlib.pyplot as plt
from scipy.linalg import expm
import math

pi = math.pi

# Populations of the two states Pa and Pb
Pa = 0.95
Pb = 1 - Pa

del_w = -560

# A exchange time period of 73 sec
Kex = 73

# Field strength of 15Hz is taken for this example
w1 = 2*pi*15
w1c = w1*math.cos(0)
w1s = w1*math.sin(0)

# Individual rate constants of the two states
Kab = Pa * Kex
Kba = Pb * Kex

# Relaxation rate constants of the two states
R1_a = 1.7
R2_a = 15

R1_b = 2
R2_b = 25

# R1_a = R1_b = 1

# R2_a = R2_b =10

# Inital M0 matrix for final calculations
M0 = np.zeros(shape=(7,1))
M0[0,0] = 0.5
M0[3,0] = Pa
M0[6,0] = Pb
I0 = 1

# The spectral sweep is at 20Hz
omg = np.arange(-900 , 915 , 20 )
# omg = np.linspace(-900 , 900 , 61)

wa = 110*80*2*pi
wb = 117*80*2*pi

ang = ((2*pi*80*10e6)+(118*80))

T_ex = 0.4

I_fin = []
# for x in range(0 ,len(wa)):
# for x in range(0,len(omg)):
#     M = np.array([[0, 0, 0, 0, 0, 0, 0],
#         [0 , (-R2_a - Kab), -wa[x] , w1s , Kba , 0 , 0],
#         [0 , wa[x] , (-R2_a-Kab) , -w1c , 0 , Kba , 0],
#         [2*(R1_a*Pa)*I0 , -w1s , w1c , (-R1_a-Kab), 0 , 0 , Kba],
#         [0 , Kab , 0 , 0 , -R2_b - Kba, -(wb[x]) , w1s ],
#         [0, 0, Kab , 0, wb[x], (-R2_b - Kba ), -w1c],
#         [2 * (R1_b * Pb)*I0, 0 , 0 , Kab , -w1s, w1c, (-R1_b - Kba)],
#     ])

for x in range(len(omg)):
  M = np.array([[0, 0, 0, 0, 0, 0, 0],
        [0 , (-R2_a - Kab), -wa , w1*math.sin((ang+(omg[x]*T_ex))) , Kba , 0 , 0],
        [0 , wa , (-R2_a-Kab) , -(w1*math.cos((ang+(omg[x]*T_ex)))) , 0 , Kba , 0],
        [2*(R1_a*Pa)*I0 , -(w1*math.sin((ang+(omg[x]*T_ex)))) , w1*math.cos((ang+(omg[x]*T_ex))) , (-R1_a-Kab), 0 , 0 , Kba],
        [0 , Kab , 0 , 0 , -R2_b - Kba, -wb , w1*math.sin((ang+(omg[x]*T_ex))) ],
        [0, 0, Kab , 0, wb, (-R2_b - Kba ), -(w1*math.cos((ang+(omg[x]*T_ex))))],
        [2 * (R1_b * Pb)*I0, 0 , 0 , Kab , -(w1*math.sin((ang+(omg[x]*T_ex)))), w1*math.cos((ang+(omg[x]*T_ex))), (-R1_b - Kba)],
    ])
  Mt = sp.linalg.expm(M)

  I = np.dot((Mt) , M0)

  I0 = M0[3,0]

  I_ratio = np.divide(I , I0)

  I_fin.append(I_ratio[3,0])

fig = plt.figure(figsize = (10 ,8))
plt.plot(omg , I_fin , 'o-' , markerfacecolor = 'red')
plt.xlim(-900 , 900 )
plt.xlabel(r"$^{15}$N (ppm)" , fontsize = 14)
plt.ylabel(r"I/I$^{0}$" , fontsize = 14)
plt.xticks([i for i  in range(-900,915, 100)])
plt.legend()
plt.show()